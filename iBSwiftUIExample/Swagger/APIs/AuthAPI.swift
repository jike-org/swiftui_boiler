//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     Login
     
     - parameter body: (body) Login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginPost(body: [String: Any], completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        loginPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Login
     - POST /login
     - 
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : {
    "access_token" : "access_token",
    "full_name" : "full_name",
    "avatar_url" : "avatar_url",
    "timezone" : "timezone",
    "last_name" : "last_name",
    "id" : "id",
    "uuid" : "uuid",
    "first_name" : "first_name",
    "email" : "email"
  },
  "message" : "message"
}}]
     
     - parameter body: (body) Login 

     - returns: RequestBuilder<AuthLoginResponse> 
     */
    open class func loginPostWithRequestBuilder(body: [String: Any]) -> RequestBuilder<SuccessResponse> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutGet(completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        logoutGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Logout
     - GET /logout
     - Logout the user from current device
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : "{}",
  "message" : "message"
}}]

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func logoutGetWithRequestBuilder() -> RequestBuilder<SuccessResponse> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Password
     
     - parameter password: (form) Password 
     - parameter currentPassword: (form) Current password 
     - parameter passwordConfirmation: (form) Password confirmation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func passwordEditPost(body: [String: Any], completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        passwordEditPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Password
     - POST /password/edit
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : "{}",
  "message" : "message"
}}]
     
     - parameter password: (form) Password 
     - parameter currentPassword: (form) Current password 
     - parameter passwordConfirmation: (form) Password confirmation 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func passwordEditPostWithRequestBuilder(body: [String: Any]) -> RequestBuilder<SuccessResponse> {
        let path = "/password/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register
     
     - parameter body: (body) Register 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerPost(body: [String: Any], completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        registerPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register
     - POST /register
     - 
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : {
    "access_token" : "access_token",
    "full_name" : "full_name",
    "avatar_url" : "avatar_url",
    "timezone" : "timezone",
    "last_name" : "last_name",
    "id" : "id",
    "uuid" : "uuid",
    "first_name" : "first_name",
    "email" : "email"
  },
  "message" : "message"
}}]
     
     - parameter body: (body) Register 

     - returns: RequestBuilder<AuthRegisterResponse> 
     */
    open class func registerPostWithRequestBuilder(body: [String: Any]) -> RequestBuilder<SuccessResponse> {
        let path = "/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
